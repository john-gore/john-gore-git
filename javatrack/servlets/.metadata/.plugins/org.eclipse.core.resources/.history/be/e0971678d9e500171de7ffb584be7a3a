package com.codingdojo.javabelt2.controllers;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.codingdojo.javabelt2.models.Post;
import com.codingdojo.javabelt2.models.User;
import com.codingdojo.javabelt2.services.PostService;
import com.codingdojo.javabelt2.services.UserService;
import com.codingdojo.javabelt2.validators.UserValidator;







@Controller
public class MainController {
	private UserService userService;
    private UserValidator userValidator;
    private PostService postService;
    
    public MainController(UserValidator userValidator,
    		UserService userService, PostService postService)     {
        this.userService = userService;
        this.userValidator = userValidator;
        this.postService = postService;
    }
    
    @PostMapping("/registration")
    public String registration(@Valid @ModelAttribute("user") User user, BindingResult result,
    		Model model, HttpSession session, RedirectAttributes redirectAttributes, HttpServletRequest request) throws ServletException {
    	userValidator.validate(user, result);
    	if (result.hasErrors()) {
            return "loginreg.jsp";
        }
    	String oldPass = user.getPassword();
    		userService.saveWithUserRole(user);
        request.login(user.getEmail(), oldPass);
        System.out.println(request.getUserPrincipal().getName());
        return "redirect:/dashboard";
    }

    @RequestMapping("/login")
    public String login(@RequestParam(value="error", required=false) String error,
    		@RequestParam(value="logout", required=false) String logout, 
    		@ModelAttribute("regMessage") String regMessage,
    		Model model, Principal principal, @ModelAttribute("user") User user) {
	    	if (principal != null) {
	    		return "redirect:/dashboard";
	    	}
        if(error != null) {
            model.addAttribute("errorMessage", "Invalid Credentials, Please try again.");
        }
        if(logout != null) {
            model.addAttribute("logoutMessage", "Logout Successful!");
        }
        return "loginreg.jsp";
    }
    
    @RequestMapping("/dashboard")
    public String home(Principal principal, Model model, @ModelAttribute("post") Post post) {
        String email = principal.getName();
        User loggedUser = userService.findByEmail(email);
        model.addAttribute("currentUser", loggedUser);
        model.addAttribute("posts", postService.findAll());
        ArrayList<Post> posts = new ArrayList<Post>();
        Collections.sort(posts, (Comparator)
        		Integer.compare(Post2.getUserlikes(), Post.getUserlikes()));
        return "dashboard.jsp";
    }
    
    @PostMapping("/dashboard/create")
    public String createEvent(@Valid @ModelAttribute("post") Post post, BindingResult result,
    		Principal principal, Model model) {
    	String email = principal.getName();
    	User loggedUser = userService.findByEmail(email);
    	if(result.hasErrors()) {
            model.addAttribute("currentUser", loggedUser);
            
            model.addAttribute("posts", postService.findAll());
            return "dashboard.jsp";
    	}
	    post.setCreatedByUser(loggedUser);
	    postService.save(post);
	    	return "redirect:/dashboard";
    }
    
    @RequestMapping("dashboard/{id}/delete")
    public String getEditForm(Principal principal, @PathVariable("id") Long id) {
    	String email = principal.getName();
    	User loggedUser = userService.findByEmail(email);
    	Post currPost = postService.findOne(id);
    	if(currPost.getCreatedByUser() == loggedUser) {
    		postService.delete(currPost);
    	}
    		return "redirect:/dashboard";
    }
    
    @RequestMapping("/dashboard/{id}/like")
    public String joinEvent(Principal principal, @PathVariable("id") Long id) {
	    	String email = principal.getName();
	    	User loggedUser = userService.findByEmail(email);
	    	Post currPost = postService.findOne(id);
	    	List<User> userlikes = currPost.getUserlikes();
	    	userlikes.add(loggedUser);
	    	currPost.setUserlikes(userlikes);
	    	postService.save(currPost);
	    	return "redirect:/dashboard";
    }
    
    @RequestMapping("/dashboard/{id}/showUser")
    public String showUser(@PathVariable("id") Long id, Model model, @ModelAttribute("user") User user) {
        model.addAttribute("pickedUser", userService.findOne(id));
        return "showuser.jsp";
    }
    
    @RequestMapping("/dashboard/{id}/seeUsersWhoLiked")
    public String showPost(@PathVariable("id") Long id, Model model, @ModelAttribute("post") Post post) {
        model.addAttribute("pickedPost", postService.findOne(id));
        model.addAttribute("usersWhoLiked", postService.findOne(id));
        return "showpost.jsp";
    }
    
    
    
    
    
    
    
}
