package com.codingdojo.javabelt1.controllers;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.codingdojo.javabelt1.models.Subscription;
import com.codingdojo.javabelt1.models.User;
import com.codingdojo.javabelt1.services.SubscriptionService;
import com.codingdojo.javabelt1.services.UserService;
import com.codingdojo.javabelt1.validators.UserValidator;




@Controller
public class UserController {
	private UserService userService;
	private UserValidator userValidator;
	private SubscriptionService subscriptionService;
	
	public UserController(UserService userService, UserValidator userValidator, SubscriptionService subscriptionService) {
        this.userService = userService;
        this.userValidator = userValidator;
        this.subscriptionService = subscriptionService;
    }
	
	
	
	
	@PostMapping("/registration")
    public String registration(@Valid @ModelAttribute("user") User user, BindingResult result,
            Model model, HttpSession session, RedirectAttributes redirectAttributes, HttpServletRequest request) throws ServletException {
            userValidator.validate(user, result);
            if (result.hasErrors()) {
                return "loginreg.jsp";
            }
            String oldPass = user.getPassword();
            List<User> userList = userService.findAll();
            if(userList.isEmpty()) {
                userService.saveUserWithAdminRole(user);
            } else {
                    userService.saveWithUserRole(user);
            }
            request.login(user.getEmail(), oldPass);
                return "redirect:/login";
            }

    @RequestMapping("/login")
    public String login(@RequestParam(value="error", required=false) String error,
    		@RequestParam(value="logout", required=false) String logout, 
    		@ModelAttribute("regMessage") String regMessage,
    		Model model, Principal principal, @ModelAttribute("user") User user) {
	    	if (principal != null) {
	    		String email = principal.getName();
	        User loggedUser = userService.findByEmail(email);
	        System.out.println(loggedUser);
	        System.out.println(loggedUser.getId());
	        if(loggedUser.getId() != 1) {
	    	
	        return "redirect:/subscription";
	        }
	        return "redirect:/admin/subscriptions";
	    	}
        if(error != null) {
            model.addAttribute("errorMessage", "Invalid Credentials, Please try again.");
        }
        if(logout != null) {
            model.addAttribute("logoutMessage", "Logout Successful!");
        }
        return "loginreg.jsp";
    }
    
    @RequestMapping("/admin/subscriptions")
    public String home(Principal principal, Model model, @ModelAttribute("subscription") Subscription subscription) {
        String email = principal.getName();
        User loggedUser = userService.findByEmail(email);
        model.addAttribute("currentUser", loggedUser);
        model.addAttribute("users",  userService.findAll());
        model.addAttribute("subscriptions", subscriptionService.findAll());
        return "admindashboard.jsp";
    }
    
    @PostMapping("/subscription/create")
    public String createSubscription(@Valid @ModelAttribute("subscription") Subscription subscription, BindingResult result,
    		Principal principal, Model model) {
    	String email = principal.getName();
    	User loggedUser = userService.findByEmail(email);
    	System.out.println(subscription);
    	if(result.hasErrors()) {
            model.addAttribute("currentUser", loggedUser);
//            model.addAttribute("inStateGetTogethers", getTogetherService.findByStateLike(loggedUser.getState()));
//            model.addAttribute("outStateGetTogethers", getTogetherService.findByStateNotLike(loggedUser.getState()));
            return "admindashboard.jsp";
    	}
    		subscriptionService.save(subscription);
    		System.out.println(subscription);
	    	return "redirect:/admin/subscriptions";
    }
    
    @RequestMapping("/subscription")
    public String subscribe(Principal principal, Model model, @ModelAttribute("subscription") Subscription subscription, BindingResult result) {
        String email = principal.getName();
        User loggedUser = userService.findByEmail(email);
        if(loggedUser.getId() == 1) {
	    	
	        return "redirect:/admin/subscriptions";
	        }
        model.addAttribute("currentUser", loggedUser);
        model.addAttribute("subscriptions", subscriptionService.findAll());
        return "selectpackage.jsp";
    }
    
    @PostMapping("/subscriptions/signup")
    public String subscribeToPackage(@RequestParam("startDate") int startDate, @RequestParam("id") 
    		Long sub_id,
    		@ModelAttribute("subscription") Subscription subscription,
    		BindingResult result,  Principal principal, Model model) {
    	
	    	System.out.println("Made it into the Package adder!!!!!");
	    	System.out.println(sub_id);
	    Subscription currSub = subscriptionService.findOne(sub_id);
	    System.out.println(currSub);
		String email = principal.getName();
		User loggedUser = userService.findByEmail(email);
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	    Calendar c = Calendar.getInstance();
	    c.setTime(new Date()); // Now use today date.
	    c.add(Calendar.DATE, startDate); // Adding dueDate integer days
	    String output = sdf.format(c.getTime());
	    System.out.println("Date plus due date is : " + output);
	    System.out.println("The date is in data type: " + output.getClass().getName());
	    
	    Date date = c.getTime();
		loggedUser.setStartDate(date);	
        loggedUser.setSubscription(currSub);
		userService.updateUser(date, loggedUser);
		
		return "redirect:/showuser";

    }
    
    @RequestMapping("/showuser")
    public String showUser(Principal principal, Model model, @ModelAttribute("subscription") Subscription subscription, BindingResult result) {
        String email = principal.getName();
        User loggedUser = userService.findByEmail(email);
        model.addAttribute("currentUser", loggedUser);
//        model.addAttribute("subscriptions", subscriptionService.findOne());
        return "showuser.jsp";
    }
    
    @RequestMapping("subscription/{id}/delete")
    public String getEditForm(@PathVariable("id") Long id) {
    		Subscription currSubscription = subscriptionService.findOne(id);
    		subscriptionService.delete(currSubscription);
    		return "redirect:/admin/subscriptions";
    }
    
    
    
    
}
